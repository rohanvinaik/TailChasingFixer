name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements*.txt
          pyproject.toml
          setup.py

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .
        
        # Install test dependencies
        python -m pip install pytest pytest-cov pytest-xdist pytest-timeout
        python -m pip install coverage[toml]
        
        # Install type checking dependencies
        python -m pip install mypy types-PyYAML types-requests types-setuptools
        
        # Install optional dependencies for full feature testing
        python -m pip install numpy scipy scikit-learn rich typer pydantic PyYAML pathspec chardet
        
        # Install development dependencies
        python -m pip install ruff black isort bandit pydocstyle

    - name: Verify installation
      run: |
        python -c "import tailchasing; print('TailChasing installed successfully')"
        python -m tailchasing --version

    - name: Run linting with Ruff
      run: |
        python -m ruff check . --output-format=github
        python -m ruff format --check .

    - name: Check import sorting
      run: |
        python -m isort --check-only --diff .

    - name: Security check with Bandit
      run: |
        python -m bandit -r tailchasing/ -f json -o bandit-report.json || true
        python -m bandit -r tailchasing/ -ll

    - name: Type checking with MyPy
      run: |
        python -m mypy tailchasing/ --ignore-missing-imports --no-strict-optional --show-error-codes

    - name: Check type coverage
      run: |
        python scripts/check_type_coverage.py 80.0

    - name: Check for circular imports
      run: |
        python scripts/check_circular_imports.py

    - name: Check __init__.py files
      run: |
        python scripts/check_init_files.py

    - name: Run test suite with coverage
      run: |
        python -m pytest tests/ \
          --cov=tailchasing \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=75 \
          --junitxml=pytest-report.xml \
          --timeout=300 \
          -v \
          --tb=short

    - name: Run benchmark suite
      run: |
        python scripts/benchmark.py --output=benchmark-results.json
        
        # Display benchmark results
        if [ -f benchmark-results.json ]; then
          echo "=== Benchmark Results ==="
          python -c "
import json
with open('benchmark-results.json') as f:
    data = json.load(f)
    for test, result in data.items():
        print(f'{test}: {result.get(\"duration\", \"N/A\")}s')
        if 'memory_peak' in result:
            print(f'  Memory peak: {result[\"memory_peak\"]}MB')
"
        fi

    - name: Test CLI functionality
      run: |
        # Test basic CLI operations
        echo "def test_function(): pass" > test_file.py
        python -m tailchasing analyze test_file.py --format=json
        rm test_file.py

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          coverage.xml
          htmlcov/
          bandit-report.json
          benchmark-results.json

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install package
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .

    - name: Test demo scenarios
      run: |
        # Test demo scenarios to ensure they work
        cd demo/
        python run_demo.py --dry-run
        
        cd ../examples/
        if [ -f run_demo.sh ]; then
          chmod +x run_demo.sh
          ./run_demo.sh --dry-run || true
        fi

    - name: Test with real Python files
      run: |
        # Test analysis on the codebase itself
        python -m tailchasing analyze tailchasing/ --limit=5 --format=json > analysis-results.json
        
        # Verify analysis completed successfully
        python -c "
import json
with open('analysis-results.json') as f:
    data = json.load(f)
    assert isinstance(data, (list, dict))
    print(f'Analysis completed successfully: {len(data) if isinstance(data, list) else len(data.keys())} items')
"

    - name: Test semantic analysis features
      run: |
        # Test enhanced semantic analysis if available
        python -c "
try:
    from tailchasing.analyzers.advanced.multimodal_semantic_enhanced import EnhancedSemanticAnalyzer
    analyzer = EnhancedSemanticAnalyzer(vector_dim=1024)  # Smaller for CI
    print('✅ Enhanced semantic analysis available')
except ImportError as e:
    print(f'⚠️  Enhanced semantic analysis not available: {e}')
"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        python -m pip install bandit safety

    - name: Run security scan
      run: |
        # Bandit security linting
        python -m bandit -r tailchasing/ -f json -o bandit-security-report.json
        python -m bandit -r tailchasing/ -ll
        
        # Check for known security vulnerabilities
        python -m safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-security-report.json
          safety-report.json

  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .
        python -m pip install memory-profiler psutil

    - name: Run performance benchmarks
      run: |
        # Memory and time benchmarks
        python scripts/benchmark.py --detailed --output=detailed-benchmarks.json
        
        # Profile memory usage
        python -m memory_profiler -m tailchasing analyze tailchasing/core/ --limit=1 > memory-profile.txt || true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          detailed-benchmarks.json
          memory-profile.txt

  compatibility-test:
    name: OS Compatibility
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install package
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .

    - name: Test basic functionality
      run: |
        python -c "import tailchasing; print('Import successful')"
        python -m tailchasing --version

    - name: Run core tests
      run: |
        python -m pip install pytest
        python -m pytest tests/test_convergence.py tests/test_duplicates.py -v

  pre-commit-check:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install pre-commit
      run: |
        python -m pip install pre-commit
        python -m pip install -e .

    - name: Run pre-commit hooks
      run: |
        # Run all hooks except push-stage hooks
        pre-commit run --all-files --hook-stage commit

    - name: Validate configuration files
      run: |
        # Validate YAML configurations
        python -c "
import yaml
import pathlib

config_files = [
    '.pre-commit-config.yaml',
    'example.tailchasing.yml'
]

for config_file in config_files:
    if pathlib.Path(config_file).exists():
        with open(config_file) as f:
            yaml.safe_load(f)
        print(f'✅ {config_file} is valid')
"