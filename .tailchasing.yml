# TailChasingFixer Default Configuration
# Version 2.0 - Improved accuracy with reduced false positives

# Path configuration
paths:
  include:
    - .
  exclude:
    - __pycache__
    - .git
    - .pytest_cache
    - .mypy_cache
    - build
    - dist
    - "*.egg-info"
    - venv
    - env
    - .venv
    - node_modules
    - .tox
    - htmlcov
    - .coverage
    - "*.pyc"
    - "*.pyo"
    - "*.pyd"
    - ".DS_Store"
    - "Thumbs.db"
    # Backup and temporary files
    - "*.bak"
    - "*.backup"
    - "*.orig"
    - "*~"
    - "*.tmp"
    - "*.temp"
    - "*.swp"
    - "*.swo"
    # Linter caches
    - ".pylint.d"
    - ".ruff_cache"
    # Generated files
    - "*_pb2.py"
    - "*_pb2_grpc.py"
    - "*.generated.py"
    # VS Code extension (for self-analysis)
    - vscode-extension
    - examples
    - scripts

# Analyzer configuration - Use improved versions by default
analyzers:
  # Import and circular dependency detection
  import_graph:
    enabled: true
    
  circular_imports:
    enabled: true
    
  # Duplicate detection - use improved scope-aware version
  duplicates:
    enabled: false  # Disabled in favor of scope_aware_duplicates
    
  scope_aware_duplicates:
    enabled: true
    description: "Detects true duplicates while understanding class scope and inheritance"
    
  # Placeholder detection - use improved mock-aware version  
  placeholders:
    enabled: false  # Disabled in favor of mock_aware_placeholders
    
  mock_aware_placeholders:
    enabled: true
    description: "Distinguishes between incomplete code and intentional test doubles"
    
  # Symbol detection - use improved runtime-aware version
  missing_symbols:
    enabled: false  # Disabled in favor of runtime_aware_symbols
    
  runtime_aware_symbols:
    enabled: true
    description: "Understands Python runtime context (__file__, __name__, etc.)"
    
  # LLM detection - use improved version
  llm_detector_improved:
    enabled: true
    description: "Reduces false positives on legitimate sequential patterns"
    
  # Semantic analysis
  semantic_hv:
    enabled: true
    threshold: 0.85  # Higher threshold to reduce false positives
    
  # Other analyzers
  git_chains:
    enabled: true
    
  context_thrashing:
    enabled: true
    
  import_anxiety:
    enabled: true
    
  hallucination_cascade:
    enabled: true

# Smart filtering to reduce false positives
smart_filter:
  enable: true
  filter_backup_files: true
  filter_linter_files: true
  filter_generated_code: true
  
  # Additional filters for common patterns
  legitimate_patterns:
    - "__init__.py"  # Init files often have similar imports
    - "test_*.py"    # Test files often have similar setup
    - "*_pb2.py"     # Protocol buffer generated files
    - "mock_*.py"    # Mock implementations

# Whitelist patterns - patterns that should NOT be flagged as issues
whitelist_patterns:
  # Serialization methods that appear across multiple model classes
  - type: method
    pattern: dict_for_update
    reason: "Common pattern for API models using shared utilities"
  
  - type: method
    pattern: to_dict
    reason: "Standard serialization interface"
  
  - type: method
    pattern: from_dict
    reason: "Standard deserialization interface"
  
  - type: method
    pattern: as_dict
    reason: "Alternative serialization interface"
  
  - type: method
    pattern: to_json
    reason: "JSON serialization interface"
  
  - type: method
    pattern: from_json
    reason: "JSON deserialization interface"
  
  # Mock implementations in tests
  - type: class
    pattern: "^Mock.*"
    regex: true
    reason: "Test mock implementations"
  
  - type: class
    pattern: "^Fake.*"
    regex: true
    reason: "Test fake implementations"
  
  - type: class
    pattern: "^Stub.*"
    regex: true
    reason: "Test stub implementations"
  
  - type: method
    pattern: "^mock_.*"
    regex: true
    context: in_test
    reason: "Mock helper methods in tests"
  
  # Property patterns
  - type: method
    pattern: "^(get|set|is|has|can)_.*"
    regex: true
    reason: "Property accessor/mutator pattern"
  
  # Test patterns
  - type: method
    pattern: "^test_.*"
    regex: true
    context: in_test
    reason: "Test method naming convention"
  
  - type: method
    pattern: setUp
    context: in_test
    reason: "Standard test setup method"
  
  - type: method
    pattern: tearDown
    context: in_test
    reason: "Standard test teardown method"
  
  # Dataclass patterns
  - type: method
    pattern: "__post_init__"
    reason: "Dataclass initialization hook"
  
  # Common interface methods expected across classes
  - type: method
    pattern: validate
    reason: "Validation interface method"
  
  - type: method
    pattern: clean
    reason: "Cleanup interface method"
  
  - type: method
    pattern: process
    reason: "Processing interface method"
  
  - type: method
    pattern: handle
    reason: "Handler interface method"
  
  - type: method
    pattern: execute
    reason: "Execution interface method"

# Risk thresholds
risk_thresholds:
  low: 10
  medium: 25
  high: 50
  critical: 100

# Issue weights - adjusted for improved analyzers
issue_weights:
  # Improved analyzers have higher confidence
  scope_aware_duplicate: 2.0
  mock_aware_placeholders: 1.5
  true_placeholder: 2.0
  incomplete_test_helper: 0.5  # Lower weight for test helpers
  runtime_aware_symbols: 2.5
  undefined_symbol: 2.5
  undefined_symbol_runtime: 1.5  # Lower weight for runtime context issues
  llm_detector_improved: 1.0
  llm_artifact_uniform_docstring: 0.5
  
  # Original weights for other analyzers
  circular_import: 3.0
  semantic_duplicate_function: 2.5
  context_window_thrashing: 2.0
  import_anxiety: 1.5
  git_chain: 1.0
  hallucination_cascade: 2.5

# Reporting configuration
report:
  show_suggestions: true
  max_issues_per_type: 20
  include_evidence: true
  include_confidence: true
  
# Performance settings
performance:
  max_file_size_mb: 10
  max_files: 10000
  parallel_processing: true
  cache_enabled: true

# Advanced features
enable_advanced_analyzers: true

# For backward compatibility - legacy analyzers can be explicitly enabled
legacy_mode: false  # Set to true to use old analyzers